I"•9<h3 id="introduction">Introduction</h3>

<p>Here is the question we wish to answer:
‚ÄúHow can we leverage generative models with unlabeled data to improve classification accuracy?‚Äù
Before we jump into the math and code <a href="https://github.com/dancsalo/TensorFlow-VAE/blob/master/example.ipynb">example</a>,
I‚Äôd like to give an overview of some common dichotomies in machine learning.</p>

<h4 id="data-and-algorithmic-models">Data and Algorithmic Models</h4>
<p>Leo Breiman illustrates the dichotomy between Data Models and Algorithmic Models in his paper
<a href="http://www2.math.uu.se/~thulin/mm/breiman.pdf">Statistical Modeling: The Two Cultures</a>.
The truths that Breiman unpacked almost 20 years ago still hold true today.
Following the conventions laid out in that paper,
any reference to a ‚Äúmodel‚Äù will be a type of algorithmic model,
which attempts to predict the response or label $y$ for a given input $x$.</p>

<h4 id="supervised-unsupervised-and-semi-supervised-learning">Supervised, Unsupervised, and Semi-Supervised Learning</h4>
<p>Supervised and unsupervised learning summarize the extremes of the training regimen spectrum for algorithmic models.
Supervised learning equates to training a model with labeled data,
while unsupervised learning expects a model to learn useful patterns without labels.
Semi-supervised learning falls in between the two, where the model employs labeled and unlabeled data
to perform a task.</p>

<h4 id="discriminative-and-generative-models">Discriminative and Generative Models</h4>
<p>The architectures of algorithmic models generally fall into two categories: discriminative and generative models.
For a supervised learning task, discriminative models learn the mapping between the set of labels ${Y}_j$ and the set of data ${X}_i$;
a label prediction $\hat{y}$ is made by applying a datum $x$ to the model, which is acting as a complicated function.
On the other hand, generative models first learn a joint distribution of the set of labels ${Y}_j$ and the set of data ${X}_i$;
a label prediction $\hat{y}$ is achieved by factoring that joint distribution into a conditional distribution $p(Y|X=x)$ and then sampling from
that conditional distribution. If generative models sound more complicated, it‚Äôs because they usually are; however, you
can use those models for a variety of tasks, even beyond the one that is interesting at the moment.</p>

<h4 id="bayesians-and-frequentists">Bayesians and Frequentists</h4>
<p>These differences between generative and discriminative models reflect the differing approaches of the Bayesian and Frequentist schools of thought respectively.
Frequentists believe that the parameters of interest are fixed and unchanging under all realistic circumstances;
therefore, discriminative models ask, ‚ÄúTo which category $y$ does $x$ belong?‚Äù
Bayesians view the world probabilistically rather than as a set of fixed phenomena that are either known or unknown;
therefore, generative models ask, ‚ÄúWhich category distribution $p(y)$ is most likely to generate this datum $x$?
Both statistical schools of thought have developed ways to validate their models, estimate error and variance, and incorporate
pre-existing information, and each has their proponents.
But sometimes it just boils down to <a href="https://xkcd.com/1132/">common sense</a>.</p>

<h3 id="mathematics">Mathematics</h3>

<p>Let‚Äôs rephrase the original question into a thesis:
We are first going to learn the distribution of data by training a generative model with unlabeled data,
and then learn a mapping from the inferred latent distribution to the label categories using labeled data only.</p>

<p>The key difference between this paradigm and the discriminative supervised learning approach is that
 the mapping learned by a generative model stretches from a distribution of data, not just the data points themselves.
 Intuitively, mapping from a distribution will allow us to generalize better to unseen data points in our
 classification task.
 To be fair, discriminative models can achieve a similar effect by <a href="http://www.jmlr.org/papers/volume11/vincent10a/vincent10a.pdf">adding noise to the input data</a>,
 but the math is less flexible than the Bayesian formulation.</p>

<p>In order to learn the distribution of data, we will need to introduce a few mathematical concepts:
the variational lower bound, Kulback Liebler divergence, and the reparameterization trick.</p>

<h4 id="variational-lower-bound">Variational Lower Bound</h4>

<p>Michael Jordan (the statistician) is credited with formalizing variational bayesian inference in
<a href="https://people.eecs.berkeley.edu/~jordan/papers/variational-intro.pdf">An Introduction to Variational Methods
for Graphical Models</a>.
We will unpack section 6 of that paper in detail with the following derivation of the
variational lower bound, or the ELBO:</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align*}
\tag{1} \log p(X) &= log \int_Z p(X,Z) \\
\tag{2} &= \log \int_Z p(X,Z) \frac{q(Z)}{q(Z)} \\
\tag{3} &= \log \Bigg ( \mathbb{E}_q \bigg [ \frac{p(X,Z)}{q(Z)} \bigg ] \Bigg ) \\
\tag{4} &\geq \mathbb{E}_q \bigg [ \log \frac{p(X,Z)}{q(Z)} \bigg ] \\
\tag{5} &= \mathbb{E}_q \big [ \log p(X,Z) \big ] - \mathbb{E}_q \big [ \log q(Z) \big ] \\
\tag{6} &= \mathbb{E}_q \big [ \log p(X,Z) \big ] + H[Z] \\
\end{align*} %]]></script>

<ol>
  <li>
    <p>We start with a definition of marginal probability.</p>
  </li>
  <li>
    <p>Here we introduce <code class="highlighter-rouge">q(Z)</code>; this distribution will approximate the true posterior <code class="highlighter-rouge">p(Z|X)</code>.
<code class="highlighter-rouge">q(Z)</code> belongs to a variational family of distributions selected to make its inference
more computationally tractable. We will cover the details of this inference in a later section.</p>
  </li>
  <li>
    <p>We apply the definition of expectation.</p>
  </li>
  <li>
    <p>We apply Jensen‚Äôs Inequality, which is best understood <a href="https://www.quora.com/What-is-an-intuitive-explanation-of-Jensens-Inequality">graphically</a>.</p>
  </li>
  <li>
    <p>We apply a property of logarithms.</p>
  </li>
  <li>
    <p>We define <code class="highlighter-rouge">H[Z]</code> to be <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory)">Shannon‚Äôs Entropy</a>.</p>
  </li>
</ol>

<p>We now have a lower bound, $L$, on the data likelihood, which we want to maximize!</p>

<h4 id="kulback-lieber-divergence">Kulback Lieber Divergence</h4>

<p>Let‚Äôs rewrite this lower bound and apply the <a href="https://medium.com/@cotra.marko/making-sense-of-the-kullback-leibler-kl-divergence-b0d57ee10e0a">KL Divergence definition</a>:</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align*}
\tag{1} L &=  \mathbb{E}_q \bigg [ \log \frac{p(X,Z)}{q(Z)} \bigg ] \\
\tag{2} L &=  \mathbb{E}_q \bigg [ \log \frac{p(Z|X)p(X)}{q(Z)} \bigg ] \\
\tag{3} L &=  \mathbb{E}_q \bigg [ \log \frac{p(Z|X)}{q(Z)} \bigg ] + \mathbb{E}_q \bigg [ \log p(X) \bigg ]  \\
\tag{4} L &=  -\mathbb{E}_q \bigg [ \log \frac{q(Z)}{p(Z|X)} \bigg ] +  \log p(X) \mathbb{E}_q \bigg [1 \bigg ]  \\
\tag{5} L &=  -D_{KL} \bigg ( q(Z) || p(Z|X) \bigg ) +  \log p(X) \\
\end{align*} %]]></script>

<p>So in order to maximize $L$, we must minimize the divergence between our true posterior, $Z$,
and our approximation, $q(Z)$. Naively differentiating and optimizing this lower bound results
results in high-variance sampling. Which is why we need a trick!</p>

<h4 id="backpropagation-and-the-reparameterization-trick">Backpropagation and the Reparameterization Trick</h4>

<p>The beauty of <a href="https://arxiv.org/pdf/1312.6114.pdf">Auto-Encoding Variational Bayes</a> is the
blending of the variational approach with neural networks and backpropagation. Classically,
variational inference has been the method for transforming a Bayesian sampling framework
into an optimization problem, with <a href="https://arxiv.org/abs/1603.00788">new applications all the time</a>.
Kingma <em>et al</em> extend that classical application with the
reparameterization trick in order to allow <a href="https://medium.com/@erikhallstrm/backpropagation-from-the-beginning-77356edf427d">backpropagation</a>
to pass through the stochastic processes of the model, specifically the $Z$ variables in the above section.
The trick involves factorizing the sampling distribution into parameters that are inferred
and noise that is injected into the model. Using a Normal distribution as an example:</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align*}
z &\sim Q(Z) = \mathcal{N}(\mu, \sigma^2) \\
z &= \mu + \sigma \odot \epsilon, \epsilon \sim \mathcal{N}(0, 1) \\
\end{align*} %]]></script>

<h3 id="variational-autoencoder">Variational Autoencoder</h3>

<p>Kingma <em>et al</em> present a simple example of the Variational Autoencoder (VAE) in Appendix B of
<a href="https://arxiv.org/pdf/1312.6114.pdf">Auto-Encoding Variational Bayes</a> that we will unpack here.
$p(Z|X)$ is modeled a neural network where $Z = \mu + \sigma \odot \epsilon, \epsilon \sim \mathcal{N}(0, I)$. Draws
from $Z$ serve as Gaussian inputs to the generative model, $q(X|Z)$, which generates reconstructions of the inputs.</p>

<div class="imgcap">
<img src="/assets/semi/vae.png" />
<div class="thecap">A three layer Variational Autoencoder with a Gaussian posterior and generative model.</div>
</div>

<p>The variational lower bound for this model that we must maximize is
(note that we condition on $X$ now unlike the previous section):</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align*}
\tag{1} L &=  -D_{KL} \bigg ( q(Z) || p(Z|X) \bigg ) +  \log p(X | Z) \\
\tag{1} L &\approx \frac{1}{2} \sum_{j=1}^J \bigg (  1 + \log \big ((\sigma_j)^2 - (\mu_j)^2 - (\sigma_j)^2 \big ) \bigg ) + \frac{1}{S} \sum_{s=1}^S \log p(X|Z^{(s)}) \\
\end{align*} %]]></script>

<p>$J$ is the dimension of the latent variable $Z$, and $S$ is the number of samples that are passed
into the generative model before calculating the log likelihood of the input data, $X$, under the
parameters inferred by the generative model.</p>

<p>The first term can be viewed as a regularizing term, which forces $Z$ to be close to the prior, and the log
likelihood term can be viewed as a reconstruction term (autoencoder parlance), where the generated data must be close
to the input data.</p>

<h3 id="semi-supervised-learning-with-deep-generative-models">Semi-Supervised Learning with Deep Generative Models</h3>
<p>In the original VAE paper, the authors employ the generative model to reconstruct
image inputs so as to show that the algorithm learns a set of <em>meaningful</em> latent variables $Z$.
In <a href="https://arxiv.org/abs/1406.5298">Semi-Supervised Learning with Deep Generative Models</a>,
Kingma <em>et al</em> use the VAE framework as a preprocessing step before discriminative training:</p>

<div class="imgcap">
<img src="/assets/semi/m1.png" />
<div class="thecap">First train the VAE using unlabeled data, then train the classifer on top of the VAE.</div>
</div>

<h4 id="implementation">Implementation</h4>
<p><strong>The Jupyter Notebook for this section can be found <a href="https://github.com/dancsalo/TensorFlow-VAE/blob/master/example.ipynb">here</a></strong>.</p>

<p>A classic binary classification dataset is the <a href="https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)">Wisconsin Breast Cancer Diagnostic dataset</a>.
It contains 569 samples with 30 variables each; each sample is labeled as ‚Äúbenign‚Äù or ‚Äúmalignant‚Äù.
<a href="http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html#sklearn.datasets.load_breast_cancer">Sklearn</a> makes
it easy to import the data.
Our goal is to build a semi-supervised model that leverages unlabeled data for the purposes of increasing
classification accuracy.</p>

<p>First, we build an straightforward two layer neural network, visualized with <a href="https://www.tensorflow.org/guide/graph_viz">Tensorboard</a>:</p>
<div class="imgcap">
<img src="/assets/semi/super_graph.png" />
<div class="thecap">Supervised Graph</div>
</div>

<p>Here‚Äôs the training loss curve:</p>
<div class="imgcap">
<img src="/assets/semi/super_loss.png" />
<div class="thecap">Training Loss for Supervised Graph</div>
</div>

<p>Which results in an accuracy on the hold-out test set of 98.6%. Very nice!</p>

<p>Next, we build a two layer VAE with a <em>linear</em> neural network build on top of $Z$. Here‚Äô
s the <a href="https://www.tensorflow.org/guide/graph_viz">Tensorboard</a> visualization:</p>
<div class="imgcap">
<img src="/assets/semi/semi_graph.png" />
<div class="thecap">Semi-Supervised Graph</div>
</div>

<p>We then train the autoencoder portion of the model
on the training data without utilizing the labels:</p>
<div class="imgcap">
<img src="/assets/semi/vae_loss.png" />
<div class="thecap">VAE Loss</div>
</div>

<div class="imgcap">
<img src="/assets/semi/recon_loss.png" />
<div class="thecap">Reconstruction Loss</div>
</div>

<p>Then we freeze the weights on the autoencoder portion
and only train the weights of the linear model with
the labeled training data:</p>
<div class="imgcap">
<img src="/assets/semi/semi_labeled_loss.png" />
<div class="thecap">Linear Model Loss</div>
</div>

<p>Which results in an accuracy on the hold-out test set of 98.6%. Which
matches the results from the supervised model! Why is this exciting?</p>

<h4 id="conclusion">Conclusion</h4>
<p>This pair of results show that the VAE has learned a set of features $Z$
that could be <em>linearly separated</em> to achieve the same accuracy
as a non-linear neural network with many more variables. This size of this
dataset and the absence of truly unlabeled data limits our ability
to go further, but real world classification problems that fit the problem description
abound, simply because labeling data is almost always more expensive than obtaining
lots of unlabeled data.</p>

<h3 id="further-reading">Further Reading</h3>
<p>The interested reader may want to read some of the many extensions of these two papers:
Several papers aim to make $Z$ more expressive, such as the
application of <a href="https://arxiv.org/pdf/1606.04934.pdf">normalizing flows</a> to the latent variables.
Some papers complicate the inference scheme for the labels, such as <a href="https://arxiv.org/pdf/1602.05473.pdf">Auxillary Deep Generative Models</a>
(as a sidenote, I began coding up this paper <a href="https://github.com/dancsalo/TensorFlow-ADGM">here</a>).
The blending of neural networks and Bayesian statistics is an active area of research,
and I‚Äôm excited to see what the next advances are!</p>
:ET